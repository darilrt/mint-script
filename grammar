stmt_list: stmt*
stmt: decl_stmt 
    | if_stmt 
    | while_stmt 
    | for_stmt 
    | return_stmt 
    | break_stmt 
    | continue_stmt 
    | import_stmt
    | export_stmt
    | block
decl_stmt: var_decl 
    | func_decl
    | class_decl
    | assign_stmt

var_decl: let_decl | mut_decl
let_decl: 'let' IDENT ':' type '=' expr
mut_decl: 'mut' IDENT ':' type ('=' expr)?
func_decl: IDENT lambda
class_decl: 'class' IDENT ('(' expr_list? ')')? '{' class_body '}'
class_body: (var_decl | func_decl)*
assign_stmt: expr '=' expr

if_stmt: 'if' expr block ('elif' expr block)* ('else' block)?
while_stmt: 'while' expr block
for_stmt: 'for' IDENT 'in' expr block
return_stmt: 'ret' expr?
break_stmt: 'break'
continue_stmt: 'continue'

import_stmt: 'import' IDENT ('as' IDENT)? // TODO
export_stmt: 'export' IDENT ('as' IDENT)? // TODO

expr: conditional
conditional: logical_or ('?' expr ':' conditional)*
logical_or: logical_and ('||' logical_and)*
logical_and: bitwise_or ('&&' bitwise_or)*
bitwise_or: bitwise_xor ('|' bitwise_xor)*
bitwise_xor: bitwise_and ('^' bitwise_and)*
bitwise_and: equality ('&' equality)*
equality: relational (('==' | '!=') relational)*
relational: shift (('<' | '>' | '<=' | '>=') shift)*
shift: add (('<<' | '>>') add)*
add: mul (('+' | '-') mul)*
mul: unary (('*' | '/' | '%') unary)*
unary: postfix | prefix
prefix: ('+' | '-' | '!' | '~')* unary | postfix
postfix: access ('++' | '--')*
access: primary ('.' IDENT | '[' expr ']' | '(' expr_list? ')')*
primary: INT_LITERAL 
    | FLOAT_LITERAL
    | STRING_LITERAL
    | 'true'
    | 'false'
    | 'null'
    | lambda
    | '(' expr ')'
    | array
    | IDENT
lambda: '(' arg_list? ')' ('->' type)? block
array: '[' expr_list? ']'
expr_list: expr (',' expr)*
arg_list: arg_decl (',' arg_decl)*
arg_decl: IDENT (':' type)? ('=' expr)?
block: '{' stmt_list? '}'

type: // TODO

IDENT: [a-zA-Z_][a-zA-Z0-9_]*
INT_LITERAL: [0-9]+
FLOAT_LITERAL: [0-9]+\.[0-9]+
STRING_LITERAL: '"' [^"]* '"'